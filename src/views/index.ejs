<!DOCTYPE html>
<html>
	<head>
		<title>Morse Code!</title>
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
		<style>
			body {
				background-color: #3b3a38;
				color: white;
			}
			.center-screen {
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
				text-align: center;
				min-height: 100vh;
			 }
			.morse-box {
				background-color: #36383B;
				width: 300px;
				height: 300px;
				border-radius: 10px;
			}
			.centered {
				margin: 0;
				position: absolute;
				top: 50%;
				left: 50%;
				margin-right: -50%;
				transform: translate(-50% , -50%);
			}
			.container {
				font-size: 2em;
				background-color: #36383B;
				border-color: white;
				border-radius: 0px 0px 10px 10px;
			}
			footer {
				position: fixed;
				left: 0;
				bottom: 0;
				width: 100%;
				text-align: center;
			}
		</style>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
		<script src="https://unpkg.com/@webcomponents/webcomponentsjs@^2/webcomponents-bundle.js"></script>
		<script src="https://unpkg.com/tone"></script>
		<script src="../../socket.io/socket.io.js"></script>
		<script>
		class Morse {
			constructor ( dotDuration , username ) {
				// Duration in milliseconds
				this.username = username;
				this.dotDuration = dotDuration;
				this.pressing = false;
				this.morseString = "";
				this.decodedString = "";
			}

			startSound() {
				// Play tone while pressing
				if ( !this.pressing ) {
					this.osc = new Tone.Oscillator ( 880 , "square" ).toMaster();
					this.osc.volume.value = -20;
					this.osc.start();

					this.pressing = true; // Is the pad being pressed right now?
					this.startTime = new Date(); // Time pad was pressed
					try {
						if ( this.startTime - this.timeStopped > 2 * this.dotDuration && this.startTime - this.timeStopped < 6 * this.dotDuration ) {
							this.morseString += " "; // New letter
						}
						else if ( this.startTime - this.timeStopped >= 6 * this.dotDuration ) {
							this.morseString += " _ "; // New word
						}
					}
					catch ( error ) {
						// timeStopped not defined - this is the first time the morse pad has
						// been pressed
						return;
					}
				}
			}

			stopSound() {
				// Stop tone after pressing
				if ( this.pressing ) {
					this.timePressed = new Date() - this.startTime; // Time the pad was pressed
					if ( this.timePressed <= this.dotDuration ) {
						this.morseString += "."; // Is a dot
					}
					else {
						this.morseString += "-"; // Is a dash
					}
					this.decodeMorseString();
					this.osc.stop();
					this.timeStopped = new Date(); // Time the pad has been released
					this.pressing = false;
				}
			}

			decodeMorseString() {
				// Decode morse string
				this._patternMap = { // Morse code definitions
						".-": "A",
						"-...": "B",
						"-.-.": "C",
						"-..": "D",
						".": "E",
						"..-.": "F",
						"--.": "G",
						"....": "H",
						"..": "I",
						".---": "J",
						"-.-": "K",
						".-..": "L",
						"--": "M",
						"-.": "N",
						"---": "O",
						".--.": "P",
						"--.-": "Q",
						".-.": "R",
						"...": "S",
						"-": "T",
						"..-": "U",
						"...-": "V",
						".--": "W",
						"-..-": "X",
						"-.--": "Y",
						"--..": "Z",
						"-----": "0",
						".----": "1",
						"..---": "2",
						"...--": "3",
						"....-": "4",
						".....": "5",
						"-....": "6",
						"--...": "7",
						"---..": "8",
						"----.": "9",
						"_": " "
				};

				this.decodedString = ""; // We don't want changes from the past
				this.decodedString += this.username + ": ";
				for ( var i = 0; i < this.morseString.split( " " ).length; i++ ) {
					if ( this.morseString.split( " " )[i] in this._patternMap ) { // Morse code pattern is in table
						this.decodedString += this._patternMap[this.morseString.split( " " )[i]];
					}
					else {
						this.decodedString += "?"; // Morse code pattern is not recognized
					}
				}
			}

			clear() {
				this.decodedString = "";
				this.morseString = "";
			}
		}
		</script>

		<meta name="viewport" content="width=device-width, initial-scale=1">
	</head>


	<body>
		<div class = "container">
			<p id="userDecodedText"></p>
			<p id="connectionDecodedText"></p>
		</div>
		<div class = "centered">
			<button class = "morse-box" id="morse">
			</button>
		</div>

		<script>
			/* TODO:
					- Fix bugs
						* When a new user connects the first letter is off
						* Other stuff
					- Implement rooms
					- Implement who is "typing"
					- Better UI?
					- Comment better
					- Valid username ( not taken )
					- Multiple people in rooms
			*/
			var username = prompt("What is your name?");
			document.getElementById( "userDecodedText" ).innerHTML = username + ": ";
			var userMorse = new Morse ( 250 , username );
			var connectionMorse = new Morse ( 250 , "Other");
			var ip = prompt("What is the server ip?");
			var port = 8080;
			var socket = io.connect('http://' + ip + ':' + port + '/'); // Connect to server

			function stopSound( morseInstance , divID ) {
				morseInstance.stopSound();
				document.getElementById( divID ).innerHTML = morseInstance.decodedString; // Show decoded morse string
			}

			function startSound( morseInstance ) {
				morseInstance.startSound();
			}

			$( '#morse' ).mouseup( function() {
				socket.emit ( 'stop' , username ); // Send that we stopped pressing the pad
				stopSound ( userMorse , 'userDecodedText' );
			});

			$( '#morse' ).mousedown( function() {
				socket.emit ( 'start' , username ); // Send that we started pressing the pad
				startSound ( userMorse , 'userDecodedText' );
			});


			socket.on ( 'start' , (user) => {
				// Make sure we don't get stuck in an endless loop of sending
				// ourself the same message
				if ( user != username ) {
					startSound ( connectionMorse );
				}
			});

			socket.on ( 'stop' , (user) => {
				if ( user != username ) {
					stopSound ( connectionMorse , 'connectionDecodedText' );
				}
				if ( user != connectionMorse.username ) {
					connectionMorse = new Morse ( 250 , user );
				}
			});
			function clear() {
				connectionMorse.clear();
				userMorse.clear();
			}
		</script>

	</body>
	<footer>
		<div class = "container">
			<p onclick="clear()">Settings</p>
			
		</div>
	</footer>
</html>
